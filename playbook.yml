---
- name: Install and configure docker
  hosts: all
  tasks:
    - name: Update apt and install aptitude
      ansible.builtin.apt:
        name: aptitude
        state: present
        update_cache: true

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install docker-ce and python3-docker
      ansible.builtin.apt:
        name:
          - docker-ce
          - python3-docker
        state: present
        update_cache: true

    - name: Creates /data
      ansible.builtin.file:
        path: /data
        state: directory

- name: Install zstd and docker-volume-snapshot
  hosts: all
  tasks:
    - name: Update apt and install zstd
      ansible.builtin.apt:
        name: zstd
        state: present
        update_cache: true

    - name: Install docker-volume-snapshot
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/junedkhatri31/docker-volume-snapshot/main/docker-volume-snapshot
        follow_redirects: true
        dest: /usr/local/bin/docker-volume-snapshot
        mode: '0755'

- name: Setup enviornment
  hosts: all
  tasks:
    - name: Copy rust config files using jinja
      ansible.builtin.template:
        src: ./templates/config.toml.j2
        dest: ./config.toml
        mode: '0644'

- name: Install binaries
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Install binaries
      ansible.builtin.command:
        cmd: cargo build --release
        creates: ./target/release

- name: Setup auth microservice
  hosts: auth
  tasks:
    - name: Copy auth binary
      ansible.builtin.copy:
        src: ./target/release/auth
        dest: /bin
        mode: '0755'

    - name: Copy compose file
      ansible.builtin.template:
        src: ./templates/services/auth-compose.yml.j2
        dest: ./compose.yml
        mode: '0644'

    - name: Stop docker compose
      community.docker.docker_compose_v2:
        project_src: .
        state: absent

    - name: Start auth microservice
      community.docker.docker_compose_v2:
        project_src: .
        state: present

- name: Setup search microservice
  hosts: search
  tasks:
    - name: Copy search binary
      ansible.builtin.copy:
        src: ./target/release/search
        dest: /bin
        mode: '0755'

#    - name: Copy osm-data
#      ansible.posix.synchronize:
#        src: /data/osm-data.tar.zst
#        dest: /data/osm-data.tar.zst
#
#    - name: Decompress osm-data
#      ansible.builtin.command:
#        cmd: zstd -d /data/osm-data.tar.zst -o /data/osm-data.tar
#        creates: /data/osm-data.tar
#
#    - name: Restore osm-data
#      ansible.builtin.command:
#        cmd: docker-volume-snapshot restore /data/osm-data.tar osm-data
#        creates: /var/lib/docker/volumes/osm-data/_data
#
#    - name: Copy compose file
#      ansible.builtin.template:
#        src: ./templates/services/search-compose.yml.j2
#        dest: ./compose.yml
#        mode: '0644'
#
#    - name: Stop docker compose
#      community.docker.docker_compose_v2:
#        project_src: .
#        state: absent
#
#    - name: Start search microservice
#      community.docker.docker_compose_v2:
#        project_src: .
#        state: present

- name: Setup tiles microservice
  hosts: tiles
  tasks:
    - name: Set file limits for root user
      pam_limits:
        domain: '*'
        limit_type: '-'
        limit_item: nofile
        value: 64000
    - name: Copy tiles binary
      ansible.builtin.copy:
        src: ./target/release/tiles
        dest: /bin
        mode: '0755'

#    - name: Copy tiles-cache
#      ansible.posix.synchronize:
#        src: /data/tiles-cache.tar.zst
#        dest: /data/tiles-cache.tar.zst
#
#    - name: Decompress tiles-cache
#      ansible.builtin.command:
#        cmd: zstd -d /data/tiles-cache.tar.zst -o /data/tiles-cache.tar
#        creates: /data/tiles-cache.tar
#
#    - name: Restore tiles-cache
#      ansible.builtin.command:
#        cmd: docker-volume-snapshot restore /data/tiles-cache.tar tiles-cache
#        creates: /var/lib/docker/volumes/tiles-cache/_data

    - name: Copy tiles data
      ansible.posix.synchronize:
        src: /data/tiles/
        dest: /data/tiles/

    - name: Copy tileserver data
      ansible.posix.synchronize:
        src: /data/tileserver/
        dest: /data/tileserver/

    - name: Copy nginx config
      ansible.builtin.template:
        src: ./templates/tileserver-nginx.conf.j2
        dest: ./nginx.conf
        mode: '0644'

    - name: Copy compose file
      ansible.builtin.template:
        src: ./templates/services/tiles-compose.yml.j2
        dest: ./compose.yml
        mode: '0644'

    - name: Stop docker compose
      community.docker.docker_compose_v2:
        project_src: .
        state: absent

    - name: Start tiles microservice
      community.docker.docker_compose_v2:
        project_src: .
        state: present

- name: Setup route microservice
  hosts: route
  tasks:
    - name: Set file limits for root user
      pam_limits:
        domain: '*'
        limit_type: '-'
        limit_item: nofile
        value: 64000
    - name: Copy route binary
      ansible.builtin.copy:
        src: ./target/release/route
        dest: /bin
        mode: '0755'

    #- name: Copy redis-db
    #  ansible.posix.synchronize:
    #    src: /data/redis-db.tar
    #    dest: /data/redis-db.tar

    #- name: Restore redis-db
    #  ansible.builtin.command:
    #    cmd: docker-volume-snapshot restore /data/redis-db.tar redis-db
    #    creates: /var/lib/docker/volumes/redis-db/_data

    - name: Copy OSRM data
      ansible.posix.synchronize:
        src: /data/osrm/
        dest: /data/osrm/

    - name: Copy compose file
      ansible.builtin.template:
        src: ./templates/services/route-compose.yml.j2
        dest: ./compose.yml
        mode: '0644'

    - name: Stop docker compose
      community.docker.docker_compose_v2:
        project_src: .
        state: absent

    - name: Start route microservice
      community.docker.docker_compose_v2:
        project_src: .
        state: present

- name: Setup nginx
  hosts: nginx
  tasks:
    - name: Set file limits for root user
      pam_limits:
        domain: '*'
        limit_type: '-'
        limit_item: nofile
        value: 64000

    - name: Copy nginx config using jinja
      ansible.builtin.template:
        src: ./templates/nginx.conf.j2
        dest: ./nginx.conf
        mode: '0644'

    - name: Copy static directory
      ansible.builtin.copy:
        src: ./static/
        dest: ./static/
        mode: '0655'

#    - name: start nginx loadbalancer
#      community.docker.docker_container:
#        name: nginx
#        image: nginx:latest
#        ports:
#          - "80:80"
#        volumes:
#          - ./nginx.conf:/etc/nginx/nginx.conf
#          - ./static:/usr/share/nginx/html
#        restart: true
#        restart_policy: always

---
- name: Install aptitude
  hosts: all
  tasks:
    - name: Update apt and install aptitude
      ansible.builtin.apt:
        name: aptitude
        state: present
        update_cache: true

- name: Install pip3
  hosts: all
  tasks:
    - name: Update apt and install python3-pip
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: true

- name: Install and configure docker
  hosts: all
  tasks:
    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: present
        update_cache: true

    - name: Install Docker SDK for Python
      ansible.builtin.pip:
        name:
          - docker
          - docker-compose
        state: present

- name: Build binaries
  hosts: localhost
  tasks:
    - name: Build binaries
      changed_when: false # let cargo handle this
      ansible.builtin.command:
        cmd: cargo build --release -F disable_logs

- name: Setup enviornment
  hosts: all
  tasks:
    - name: Find release binaries
      ansible.builtin.find:
        paths: ./target/release
        file_type: file
      delegate_to: localhost
      register: binaries

    - name: Copy release binaries
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: ./target/release/
        mode: '0755'
      loop: "{{ binaries.files }}"

    - name: Copy docker compose files
      ansible.builtin.copy:
        src: ./compose.yml
        dest: ./compose.yml
        mode: '0655'

    - name: Copy dotenv fie
      ansible.builtin.copy:
        src: ./.env
        dest: ./.env
        mode: '0655'

    - name: Copy rust config files using jinja
      ansible.builtin.template:
        src: ./templates/config.toml.j2
        dest: ./config.toml
        mode: '0644'

    - name: Shutdown docker compose
      community.docker.docker_compose_v2:
        project_src: .
        state: absent

- name: Setup nginx
  hosts: nginx
  tasks:
    - name: Copy nginx config using jinja
      ansible.builtin.template:
        src: ./templates/nginx.conf.j2
        dest: ./nginx.conf
        mode: '0644'

    - name: Copy static directory
      ansible.builtin.copy:
        src: ./static/
        dest: ./static/
        mode: '0655'

    - name: Start nginx loadbalancer
      community.docker.docker_compose_v2:
        project_src: .
        services:
          - nginx

- name: Setup auth microserve
  hosts: auth
  tasks:
    - name: Copy auth binary
      ansible.builtin.copy:
        src: ./target/release/auth
        dest: /bin
        mode: '0755'

    - name: Start auth microservice
      community.docker.docker_compose_v2:
        project_src: .
        services:
          - auth

- name: Setup routing microservice
  hosts: routing
  tasks:
    - name: Copy routing binary
      ansible.builtin.copy:
        src: ./target/release/routing
        dest: /bin
        mode: '0755'

    - name: Copy OSRM data
      ansible.builtin.copy:
        src: /data/osrm/
        dest: /data/osrm/
        mode: '0644'

    - name: Start routing microservice
      community.docker.docker_compose_v2:
        project_src: .
        services:
          - routing
          - osrm-backend

- name: Setup tiles microservice
  hosts: tiles
  tasks:
    - name: Copy tiles data
      ansible.builtin.copy:
        src: /data/tiles/
        dest: /data/tiles/
        mode: '0644'

    - name: Copy tileserver config files
      ansible.builtin.copy:
        src: /data/tileserver/
        dest: /data/tileserver/
        mode: '0644'

    - name: Start tiles microservice
      community.docker.docker_compose_v2:
        project_src: .
        services:
          - tiles
          - tileserver

# - name: Setup search microservice
#   hosts: search
#   tasks:
#     - name: Copy search binary
#       ansible.builtin.copy:
#         src: ./target/release/search
#         dest: /bin
#         mode: '0755'

#     - name: Update apt and install zstd
#       ansible.builtin.apt:
#         name: zstd
#         state: present
#         update_cache: true

#     - name: Install docker-volume-snapshot
#       ansible.builtin.uri:
#         url: https://raw.githubusercontent.com/junedkhatri31/docker-volume-snapshot/main/docker-volume-snapshot
#         follow_redirects: true
#         dest: /usr/local/bin/docker-volume-snapshot
#         mode: '0755'

#     - name: Copy nominatim-data
#       ansible.builtin.copy:
#         src: /data/nominatim-data.tar.zst
#         dest: /tmp
#         mode: '0644'

#     - name: Decompress nominatim-data
#       ansible.builtin.command:
#         cmd: zstd -d /tmp/nominatim-data.tar.zst -o /tmp/nominatim-data.tar
#         creates: /tmp/nominatim-data.tar

#     - name: Restore nominatim-data
#       ansible.builtin.command:
#         cmd: docker-volume-snapshot restore /tmp/nominatim-data.tar nominatim-data
#         creates: /var/lib/docker/volumes/nominatim-data/_data

#     - name: Start nominatim service
#       community.docker.docker_container:
#         name: nominatim
#         image: mediagis/nominatim:4.4
#         volumes:
#           - nominatim-data:/var/lib/postgresql/14/main
#         env:
#           PBF_URL: https://download.geofabrik.de/europe/monaco-latest.osm.pbf # dummy url
#         network_mode: host
#         state: started
#         restart: true

#     - name: Start search service
#       community.docker.docker_container:
#         name: search
#         image: ubuntu:jammy
#         command: search
#         volumes:
#           - /bin:/bin
#           - ./config.toml:/config.toml
#         network_mode: host
#         state: started
#         restart: true
